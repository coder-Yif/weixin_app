{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\auth.js"
    ],
    "names": [
        "Base",
        "require",
        "rp",
        "module",
        "exports",
        "loginByWeixinAction",
        "fullUserInfo",
        "post",
        "code",
        "userInfo",
        "JSON",
        "parse",
        "rawData",
        "console",
        "log",
        "currentTime",
        "parseInt",
        "Date",
        "getTime",
        "clientIp",
        "options",
        "method",
        "url",
        "qs",
        "grant_type",
        "js_code",
        "secret",
        "think",
        "config",
        "appid",
        "sessionData",
        "openid",
        "fail",
        "crypto",
        "sha1",
        "createHash",
        "update",
        "session_key",
        "digest",
        "signature",
        "WeixinSerivce",
        "service",
        "weixinUserInfo",
        "decryptUserInfoData",
        "encryptedData",
        "iv",
        "isEmpty",
        "userId",
        "model",
        "where",
        "weixin_openid",
        "getField",
        "is_new",
        "buffer",
        "Buffer",
        "from",
        "nickName",
        "nickname",
        "toString",
        "add",
        "username",
        "uuid",
        "password",
        "register_time",
        "register_ip",
        "last_login_time",
        "last_login_ip",
        "mobile",
        "avatar",
        "avatarUrl",
        "gender",
        "country",
        "province",
        "city",
        "user_id",
        "newbuffer",
        "id",
        "newUserInfo",
        "field",
        "find",
        "TokenSerivce",
        "sessionKey",
        "create",
        "success",
        "token",
        "logoutAction"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\api\\controller\\auth.js",
    "sourcesContent": [
        "const Base = require('./base.js');\r\nconst rp = require('request-promise');\r\nmodule.exports = class extends Base {\r\n    async loginByWeixinAction() {\r\n        // const code = this.post('code');\r\n        const fullUserInfo = this.post('info');\r\n        const code =fullUserInfo.code;\r\n        const userInfo = JSON.parse(fullUserInfo.rawData);\r\n        console.log('userInfo')\r\n        console.log(code)\r\n        console.log(userInfo)\r\n        console.log('userInfo')\r\n        let currentTime = parseInt(new Date().getTime() / 1000);\r\n        const clientIp = ''; // 暂时不记录 ip test git\r\n        // 获取openid\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'https://api.weixin.qq.com/sns/jscode2session',\r\n            qs: {\r\n                grant_type: 'authorization_code',\r\n                js_code: code,\r\n                secret: think.config('weixin.secret'),\r\n                appid: think.config('weixin.appid')\r\n            }\r\n        };\r\n        let sessionData = await rp(options);\r\n        sessionData = JSON.parse(sessionData);\r\n        if (!sessionData.openid) {\r\n            return this.fail('登录失败1');\r\n        }\r\n        // 验证用户信息完整性\r\n        const crypto = require('crypto');\r\n        const sha1 = crypto.createHash('sha1').update(fullUserInfo.rawData + sessionData.session_key).digest('hex');\r\n        if (fullUserInfo.signature !== sha1) {\r\n            return this.fail('登录失败2');\r\n        }\r\n        // 解释用户数据\r\n        const WeixinSerivce = this.service('weixin', 'api');\r\n        const weixinUserInfo = await WeixinSerivce.decryptUserInfoData(sessionData.session_key, fullUserInfo.encryptedData, fullUserInfo.iv);\r\n        if (think.isEmpty(weixinUserInfo)) {\r\n            return this.fail('登录失败3');\r\n        }\r\n        // 根据openid查找用户是否已经注册\r\n        let userId = await this.model('user').where({\r\n            weixin_openid: sessionData.openid\r\n        }).getField('id', true);\r\n        let is_new = 0;\r\n        if (think.isEmpty(userId)) {\r\n            // 注册\r\n            const buffer = Buffer.from(userInfo.nickName);\r\n            let nickname = buffer.toString('base64');\r\n            userId = await this.model('user').add({\r\n                username: '微信用户' + think.uuid(6),\r\n                password: sessionData.openid,\r\n                register_time: currentTime,\r\n                register_ip: clientIp,\r\n                last_login_time: currentTime,\r\n                last_login_ip: clientIp,\r\n                mobile: '',\r\n                weixin_openid: sessionData.openid,\r\n                avatar: userInfo.avatarUrl || '',\r\n                gender: userInfo.gender || 1, // 性别 0：未知、1：男、2：女\r\n                nickname: nickname,\r\n                country: userInfo.country,\r\n                province: userInfo.province,\r\n                city: userInfo.city\r\n            });\r\n            is_new = 1;\r\n        }\r\n        sessionData.user_id = userId;\r\n        // 查询用户信息\r\n        const newbuffer = Buffer.from(userInfo.nickName);\r\n        let nickname = newbuffer.toString('base64');\r\n        // 更新登录信息\r\n        await this.model('user').where({\r\n            id: userId\r\n        }).update({\r\n            last_login_time: currentTime,\r\n            last_login_ip: clientIp,\r\n            avatar: userInfo.avatarUrl,\r\n            nickname: nickname,\r\n            country: userInfo.country,\r\n            province: userInfo.province,\r\n            city: userInfo.city\r\n        });\r\n        const newUserInfo = await this.model('user').field('id,username,nickname,gender, avatar').where({\r\n            id: userId\r\n        }).find();\r\n        newUserInfo.nickname = Buffer.from(newUserInfo.nickname, 'base64').toString();\r\n        const TokenSerivce = this.service('token', 'api');\r\n        const sessionKey = await TokenSerivce.create(sessionData);\r\n        if (think.isEmpty(newUserInfo) || think.isEmpty(sessionKey)) {\r\n            return this.fail('登录失败4');\r\n        }\r\n        return this.success({\r\n            token: sessionKey,\r\n            userInfo: newUserInfo,\r\n            is_new: is_new\r\n        });\r\n    }\r\n    async logoutAction() {\r\n        return this.success();\r\n    }\r\n};"
    ]
}